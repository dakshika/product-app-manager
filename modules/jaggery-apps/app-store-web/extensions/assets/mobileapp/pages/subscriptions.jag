<%
var caramel;

require('/modules/store.js').exec(function (ctx) {
    var count, tags, title,
            log = ctx.log,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            types = store.assetTypes(),
            utility = require('/modules/util.js'),
            mdm = require('/extensions/assets/mobileapp/modules/mdm.js').module,
            mdmConfig = new Packages.org.wso2.carbon.appmgt.mobile.store.MDMConfig(),
            devicesClass = new Packages.org.wso2.carbon.appmgt.mobile.store.Devices();

    var mdmUIConfig  = {enabled : mdmConfig.isMDMEnabled()};

    if(!mdmUIConfig.enabled) {
        response.sendRedirect(404);
        return;
    }


    var devices = [];
    if(user != null && mdmConfig.isMDMEnabled()){
        if(mdmConfig.isSampleDevicesEnabled()){
            devices =  parse(String(devicesClass.getDevicesList(user.tenantId, "user", [user.username])));
        }else{
            devices =  mdm.formatDevicesList(parse(String(devicesClass.getDevicesList(user.tenantId, "user", [user.username]))));
        }
    }

    caramel = require('caramel');

    var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);

    if (!user) {
        response.sendRedirect(caramel.configs().context);
        return;
    }

    var recentAssets = store.recentAssets(type, 3);
    var subscriptions = store.subscriptions(type);

    count = Object.keys(subscriptions).length;

    tags = [
        {
            url: '/assets/' + type + '?page=1&tag=',
            data: store.tags(type)
        }
    ];

    title = store.assetLinks(type).title;

    caramel.render({
        'title': 'Store | My Items',
        user: user,
        sso: sso,
        header: site.header(tenantId, {
            sso: sso,
            user: user
        }),
        navigation: site.navigation(tenantId),
        devices: devices,
        search: {
            search: {title: type},
            isTopAssets: false,
            searchFields: rxtAttributes
        },
        userAssets: count > 0 ? subscriptions : null,
        recentAssets: recentAssets,
        myAssets: { user: user, type: type, title: title},
        tags: tags
    });
}, request, response, session);
%>